name: Deploy to Staging

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read
  pull-requests: read

jobs:
  process-approval:
    runs-on: ubuntu-latest

    if: |
      contains(github.event.issue.title, 'Deploy to Staging needs approval') &&
      (contains(github.event.comment.body, 'approve') || contains(github.event.comment.body, 'LGTM'))
    steps:
      - name: Check Approver
        id: check-approver
        uses: actions/github-script@v6
        with:
          script: |
            // Define allowed approvers
            const ALLOWED_APPROVERS = [
              'sohag-pro',
              'tech-lead',
              'devops-engineer'
            ];
            
            // Define allowed teams (team slugs)
            const ALLOWED_TEAMS = [
              'devops',
              'senior-developers'
            ];
            
            const commenter = context.payload.comment.user.login;
            console.log(`Comment by: ${commenter}`);
            
            // First check if user is directly in allowed list
            if (ALLOWED_APPROVERS.includes(commenter)) {
              console.log('Approver is in allowed users list');
              core.setOutput('status', 'authorized');
              return;
            }
            
            // Check if user is member of allowed teams
            let isTeamMember = false;
            for (const team of ALLOWED_TEAMS) {
              try {
                const { data: isMember } = await github.rest.teams.getMembershipForUserInOrg({
                  org: context.repo.owner,
                  team_slug: team,
                  username: commenter
                });
                
                if (isMember.state === 'active') {
                  console.log(`Approver is member of team: ${team}`);
                  isTeamMember = true;
                  break;
                }
              } catch (error) {
                console.log(`Error checking membership in team ${team}:`, error.message);
                continue;
              }
            }
            
            if (isTeamMember) {
              core.setOutput('status', 'authorized');
            } else {
              console.log('User not authorized to approve deployments');
              core.setOutput('status', 'unauthorized');
            }

      - name: Handle Unauthorized User
        if: steps.check-approver.outputs.status == 'unauthorized'
        uses: actions/github-script@v6
        with:
          script: |
            const approver = context.payload.comment.user.login;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `❌ @${approver} is not authorized to approve deployments. Please wait for approval from an authorized team member.`
            });
            core.setFailed('Approval must come from an authorized user or team member');

      - name: Extract commit SHA
        id: extract-sha
        if: steps.check-approver.outputs.status == 'authorized'
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            const match = issueBody.match(/"commit_sha":\s*"([a-f0-9]+)"/);
            if (!match) {
              core.setFailed('Could not find commit SHA in issue body');
              return;
            }
            const commitSha = match[1];
            core.setOutput('commit_sha', commitSha);
            console.log(`Extracted commit SHA: ${commitSha}`);

      - uses: actions/checkout@v2
        if: steps.check-approver.outputs.status == 'authorized'
        with:
          ref: ${{ steps.extract-sha.outputs.commit_sha }}

      - name: Verify correct commit
        if: steps.check-approver.outputs.status == 'authorized'
        run: |
          current_sha=$(git rev-parse HEAD)
          expected_sha=${{ steps.extract-sha.outputs.commit_sha }}
          if [ "$current_sha" != "$expected_sha" ]; then
            echo "Error: Checked out SHA ($current_sha) does not match expected SHA ($expected_sha)"
            exit 1
          fi
          echo "Verified correct commit SHA: $current_sha"

      - name: Deploy to Staging
        if: steps.check-approver.outputs.status == 'authorized'
        run: |
          echo "Deploying commit ${{ steps.extract-sha.outputs.commit_sha }} to staging..."
          # Add your deployment commands here
          
      - name: Close Approval Issue
        if: steps.check-approver.outputs.status == 'authorized'
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const deployedSha = '${{ steps.extract-sha.outputs.commit_sha }}';
            const approver = context.payload.comment.user.login;
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              state: 'closed'
            });
            
            // Add completion comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `✅ Deployment to staging completed successfully!\n\nDeployed commit: ${deployedSha}\nBranch: dev\nApproved by: @${approver}`
            });
